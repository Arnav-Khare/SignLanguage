[{"/home/hashiraflame/SignLanguage/src/index.js":"1","/home/hashiraflame/SignLanguage/src/App.js":"2","/home/hashiraflame/SignLanguage/src/Components/images.js":"3"},{"size":219,"mtime":1610622585580,"results":"4","hashOfConfig":"5"},{"size":3774,"mtime":1610631434106,"results":"6","hashOfConfig":"5"},{"size":999,"mtime":1610630311344,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"18pr0md",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"/home/hashiraflame/SignLanguage/src/index.js",[],["16","17"],"/home/hashiraflame/SignLanguage/src/App.js",["18"],"/home/hashiraflame/SignLanguage/src/Components/images.js",["19","20"],"import React from 'react';\nimport './Images.css';\n\nconst Images = ({text}) => {\n    \n        const wordsArray = text.split(' ')  \n        let eachWord =  wordsArray.map(e => {\n            if(e !== '')\n            {\n                const letters = e.split('');\n                const lettersImg = letters.map( (single) => {\n                    return(\n                            <img src={'images/'+single.toUpperCase()+'.png'} className=\"imageSize\"></img>\n                    )\n                })\n                return ( \n                        <div className=\"column\">\n                            <div className=\"jarvis\">{e}</div>\n                            {lettersImg}\n                        </div>\n                )\n            }\n        });\n\n    if(text !== \"\")\n    {\n        return (\n            <div className=\"imageContainer\">\n                {eachWord}\n            </div>\n         )\n    }\n    else\n    {\n        return(\n            <div></div>\n        );\n    }\n}\n\nexport default Images;",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":6,"column":7,"nodeType":"27","messageId":"28","endLine":6,"endColumn":16},{"ruleId":"29","severity":1,"message":"30","line":7,"column":42,"nodeType":"31","messageId":"32","endLine":7,"endColumn":44},{"ruleId":"33","severity":1,"message":"34","line":13,"column":29,"nodeType":"35","endLine":13,"endColumn":100},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'inputText' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]